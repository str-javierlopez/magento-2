<?php

namespace Hiberus\Lopez\Console\Command;

use Hiberus\Lopez\Api\ExamManagementInterface;
use Hiberus\Lopez\Helper\Data;
use Magento\Framework\Api\SearchCriteriaBuilder;
use Magento\Framework\Api\SearchCriteriaInterface;
use Magento\Framework\Exception\LocalizedException;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

/**
 * Class ViewStudentsExams
 * @package Hiberus\Lopez\Console\Command
 */
class ViewStudentsExams extends Command
{

    /**
     * Option id for command line
     */
    const OPTION_ID        = 'id';

    /**
     * Option firstname for command line
     */
    const OPTION_FIRSTNAME = 'firstname';

    /**
     * Option lastname for command line
     */
    const OPTION_LASTNAME  = 'lastname';

    /**
     * Option mark for command line
     */
    const OPTION_MARK      = 'mark';

    /**
     * Command Name
     */
    const COMMAND_NAME     = 'hiberus:lopez:show:exams';

    /**
     * @var ExamManagementInterface
     */
    private $_examManagement;

    /**
     * @var Data
     */
    private $_helper_data;

    /**
     * @var SearchCriteriaBuilder
     */
    private $_searchCriteria;

    /**
     * @var bool
     */
    private $_haveOptions = false;

    /**
     * ViewStudentsExams constructor.
     * @param ExamManagementInterface $examManagement
     * @param Data $helper_data
     * @param SearchCriteriaBuilder $searchCriteriaBuilder
     * @param string|null $name
     */
    public function __construct(
        ExamManagementInterface $examManagement,
        Data $helper_data,
        SearchCriteriaBuilder $searchCriteriaBuilder,
        string $name = null
    ) {
        $this->_examManagement = $examManagement;
        $this->_helper_data    = $helper_data;
        $this->_searchCriteria = $searchCriteriaBuilder;
        parent::__construct($name);
    }

    /**
     *
     */
    protected function configure()
    {
        $this->setName(self::COMMAND_NAME);
        $this->setDescription(__('View all student grades'));
        $this->addOption(
            self::OPTION_ID,
            null,
            InputOption::VALUE_REQUIRED,
            'Id Exam'
        );
        $this->addOption(
            self::OPTION_FIRSTNAME,
            null,
            InputOption::VALUE_REQUIRED,
            'Firstname'
        );
        $this->addOption(
            self::OPTION_LASTNAME,
            null,
            InputOption::VALUE_REQUIRED,
            'Lastname'
        );
        $this->addOption(
            self::OPTION_MARK,
            null,
            InputOption::VALUE_REQUIRED,
            'Mark'
        );
        parent::configure(); // TODO: Change the autogenerated stub
    }

    /**
     * Check if module is enabled
     * @param OutputInterface $output
     * @return void
     */
    private function isAllowCommand(OutputInterface $output) : void
    {
        if ($this->_helper_data->getModuleEnabled()) {
            $output->writeln('<error>Hiberus Lopez Module is not enabled :(</error>');
            exit;
        }
        exit;
    }

    /**
     * @param InputInterface $input
     * @return SearchCriteriaInterface
     */
    private function getOptionsArguments(InputInterface $input) : SearchCriteriaInterface
    {
        $idExam    = $input->getOption(self::OPTION_ID);
        $firstname = $input->getOption(self::OPTION_FIRSTNAME);
        $lastname  = $input->getOption(self::OPTION_LASTNAME);
        $mark      = $input->getOption(self::OPTION_MARK);

        if (isset($idExam)) {
            $this->_haveOptions = true;
            $this->_searchCriteria->addFilter(self::OPTION_ID, $idExam, 'eq');
        }
        if (isset($firstname)) {
            $this->_haveOptions = true;
            $this->_searchCriteria->addFilter(self::OPTION_FIRSTNAME, $firstname, 'eq');
        }
        if (isset($lastname)) {
            $this->_haveOptions = true;
            $this->_searchCriteria->addFilter(self::OPTION_LASTNAME, $lastname, 'eq');
        }
        if ($mark) {
            $this->_haveOptions = true;
            $this->_searchCriteria->addFilter(self::OPTION_MARK, $mark, 'eq');
        }

        return $this->_searchCriteria->create();
    }

    /**
     * Execute the command
     *
     * @param InputInterface $input
     * @param OutputInterface $output
     *
     * @return void
     * @throws LocalizedException
     */
    protected function execute(InputInterface $input, OutputInterface $output) : void
    {
        $this->isAllowCommand($output);
        $searchCriteria = $this->getOptionsArguments($input);
        $examsList      = $this->_haveOptions ? $this->_examManagement->getListByCriteria($searchCriteria) : $this->_examManagement->getList();
        $output->writeln('<info>Students</info>');
        foreach ($examsList->getItems() as $exam) {
            $output->write($exam->getId() . ' ' . $exam->getFirstname() . ' ' . $exam->getLastname() . ' ' . $exam->getMark());
            $output->writeln('');
        }
    }
}
